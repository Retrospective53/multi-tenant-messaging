// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :exec
INSERT INTO messages (id, tenant_id, payload)
VALUES ($1, $2, $3)
`

type CreateMessageParams struct {
	ID       uuid.UUID       `json:"id"`
	TenantID uuid.UUID       `json:"tenant_id"`
	Payload  json.RawMessage `json:"payload"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.db.ExecContext(ctx, createMessage, arg.ID, arg.TenantID, arg.Payload)
	return err
}

const getMessagesByTenant = `-- name: GetMessagesByTenant :many
SELECT id, tenant_id, payload, created_at
FROM messages
WHERE tenant_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetMessagesByTenant(ctx context.Context, tenantID uuid.UUID) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByTenant, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Payload,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
